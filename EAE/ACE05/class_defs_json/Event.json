{
    "Trigger": "class Trigger:\n    \"\"\"a single verb or nominalization that serve as the main word to evoke the corresponding event\"\"\"\n    def __init__(self, name: str):\n        self.name = name",
    "Movement": "class Movement(Event):\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        artifact: List[FAC | ORG | PER | VEH | WEA] = [],\n        destination: List[FAC | GPE | LOC] = [],\n        origin: List[FAC | GPE | LOC] = [],\n        vehicle: List[VEH] = [],\n    ):\n        self.trigger = trigger\n        self.agent = agent\n        self.artifact = artifact\n        self.destination = destination\n        self.origin = origin\n        self.vehicle = vehicle",
    "Personnel": "class Personnel(Event):\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        entity: List[GPE | ORG | PER] = [],\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        self.trigger = trigger\n        self.agent = agent\n        self.entity = entity\n        self.person = person\n        self.place = place",
    "Conflict": "class Conflict(Event):\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        attacker: List[GPE | ORG | PER] = [],\n        entity: List[GPE | ORG | PER] = [],\n        instrument: List[VEH | WEA] = [],\n        place: List[FAC | GPE | LOC] = [],\n        target: List[FAC | LOC | ORG | PER | VEH | WEA] = [],\n        victim: List[PER] = [],\n    ):\n        self.trigger = trigger\n        self.attacker = attacker\n        self.entity = entity\n        self.instrument = instrument\n        self.place = place\n        self.target = target\n        self.victim = victim",
    "Contact": "class Contact(Event):\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        entity: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        self.trigger = trigger\n        self.entity = entity\n        self.place = place",
    "Life": "class Life(Event):\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        instrument: List[VEH | WEA] = [],\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n        victim: List[PER] = [],\n    ):\n        self.trigger = trigger\n        self.agent = agent\n        self.instrument = instrument\n        self.person = person\n        self.place = place\n        self.victim = victim",
    "Transaction": "class Transaction(Event):\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        artifact: List[FAC | ORG | PER | VEH | WEA] = [],\n        beneficiary: List[GPE | ORG | PER] = [],\n        buyer: List[GPE | ORG | PER] = [],\n        giver: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n        recipient: List[GPE | ORG | PER] = [],\n        seller: List[GPE | ORG | PER] = [],\n    ):\n        self.trigger = trigger\n        self.artifact = artifact\n        self.beneficiary = beneficiary\n        self.buyer = buyer\n        self.giver = giver\n        self.place = place\n        self.recipient = recipient\n        self.seller = seller",
    "Business": "class Business(Event):\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        org: List[ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        self.trigger = trigger\n        self.agent = agent\n        self.org = org\n        self.place = place",
    "Justice": "class Justice(Event):\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        agent: List[GPE | ORG | PER] = [],\n        defendant: List[GPE | ORG | PER] = [],\n        destination: List[FAC | GPE | LOC] = [],\n        entity: List[GPE | ORG | PER] = [],\n        origin: List[FAC | GPE | LOC] = [],\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n        plaintiff: List[GPE | ORG | PER] = [],\n        prosecutor: List[GPE | ORG | PER] = [],\n    ):\n        self.trigger = trigger\n        self.adjudicator = adjudicator\n        self.agent = agent\n        self.defendant = defendant\n        self.destination = destination\n        self.entity = entity\n        self.origin = origin\n        self.person = person\n        self.place = place\n        self.plaintiff = plaintiff\n        self.prosecutor = prosecutor",
    "Transport": "class Transport(Movement):\n    \"\"\"self.agent transported self.artifact in self.vehicle vehicle from self.origin place to self.destination place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        artifact: List[FAC | ORG | PER | VEH | WEA] = [],\n        destination: List[FAC | GPE | LOC] = [],\n        origin: List[FAC | GPE | LOC] = [],\n        vehicle: List[VEH] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            agent=agent,\n            artifact=artifact,\n            destination=destination,\n            origin=origin,\n            vehicle=vehicle,\n        )",
    "Elect": "class Elect(Personnel):\n    \"\"\"self.entity elected self.person in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        entity: List[GPE | ORG | PER] = [],\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            entity=entity,\n            person=person,\n            place=place,\n        )",
    "Start_Position": "class Start_Position(Personnel):\n    \"\"\"self.person started working at self.entity organization in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        entity: List[GPE | ORG | PER] = [],\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            entity=entity,\n            person=person,\n            place=place,\n        )",
    "Nominate": "class Nominate(Personnel):\n    \"\"\"self.agent nominated self.person.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        person: List[PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            agent=agent,\n            person=person,\n        )",
    "End_Position": "class End_Position(Personnel):\n    \"\"\"self.person stopped working at self.entity organization in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        entity: List[GPE | ORG | PER] = [],\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            entity=entity,\n            person=person,\n            place=place,\n        )",
    "Attack": "class Attack(Conflict):\n    \"\"\"self.attacker attacked self.target hurting self.victim victims using self.instrument instrument at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        attacker: List[GPE | ORG | PER] = [],\n        instrument: List[VEH | WEA] = [],\n        place: List[FAC | GPE | LOC] = [],\n        target: List[FAC | LOC | ORG | PER | VEH | WEA] = [],\n        victim: List[PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            attacker=attacker,\n            instrument=instrument,\n            place=place,\n            target=target,\n            victim=victim,\n        )",
    "Demonstrate": "class Demonstrate(Conflict):\n    \"\"\"self.entity demonstrated at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        entity: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            entity=entity,\n            place=place,\n        )",
    "Meet": "class Meet(Contact):\n    \"\"\"self.entity[0] met with self.entity[1] in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        entity: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            entity=entity,\n            place=place,\n        )",
    "Phone_Write": "class Phone_Write(Contact):\n    \"\"\"self.entity[0] communicated remotely with self.entity[1] at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        entity: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            entity=entity,\n            place=place,\n        )",
    "Marry": "class Marry(Life):\n    \"\"\"self.person[0] married self.person[1] in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            person=person,\n            place=place,\n        )",
    "Injure": "class Injure(Life):\n    \"\"\"self.agent injured self.victim with self.instrument instrument in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        instrument: List[VEH | WEA] = [],\n        place: List[FAC | GPE | LOC] = [],\n        victim: List[PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            agent=agent,\n            instrument=instrument,\n            place=place,\n            victim=victim,\n        )",
    "Die": "class Die(Life):\n    \"\"\"self.agent killed self.victim with self.instrument instrument in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        instrument: List[VEH | WEA] = [],\n        place: List[FAC | GPE | LOC] = [],\n        victim: List[PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            agent=agent,\n            instrument=instrument,\n            place=place,\n            victim=victim,\n        )",
    "Be_Born": "class Be_Born(Life):\n    \"\"\"self.person was born in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            person=person,\n            place=place,\n        )",
    "Divorce": "class Divorce(Life):\n    \"\"\"self.person[0] divorced self.person[1] in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            person=person,\n            place=place,\n        )",
    "Transfer_Money": "class Transfer_Money(Transaction):\n    \"\"\"self.giver gave money to self.recipient for the benefit of self.beneficiary in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        beneficiary: List[GPE | ORG | PER] = [],\n        giver: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n        recipient: List[GPE | ORG | PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            beneficiary=beneficiary,\n            giver=giver,\n            place=place,\n            recipient=recipient,\n        )",
    "Transfer_Ownership": "class Transfer_Ownership(Transaction):\n    \"\"\"self.seller gave self.artifact to self.buyer for the benefit of self.beneficiary at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        artifact: List[FAC | ORG | PER | VEH | WEA] = [],\n        beneficiary: List[GPE | ORG | PER] = [],\n        buyer: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n        seller: List[GPE | ORG | PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            artifact=artifact,\n            beneficiary=beneficiary,\n            buyer=buyer,\n            place=place,\n            seller=seller,\n        )",
    "End_Org": "class End_Org(Business):\n    \"\"\"self.org organization shut down at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        org: List[ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            org=org,\n            place=place,\n        )",
    "Start_Org": "class Start_Org(Business):\n    \"\"\"self.agent started self.org organization at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        org: List[ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            agent=agent,\n            org=org,\n            place=place,\n        )",
    "Declare_Bankruptcy": "class Declare_Bankruptcy(Business):\n    \"\"\"self.org declared bankruptcy at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        org: List[ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            org=org,\n            place=place,\n        )",
    "Merge_Org": "class Merge_Org(Business):\n    \"\"\"self.org[0] organization merged with self.org[1] organization.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        org: List[ORG | PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            org=org,\n        )",
    "Sue": "class Sue(Justice):\n    \"\"\"self.plaintiff sued self.defendant before self.adjudicator court or judge in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        defendant: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n        plaintiff: List[GPE | ORG | PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            adjudicator=adjudicator,\n            defendant=defendant,\n            place=place,\n            plaintiff=plaintiff,\n        )",
    "Arrest_Jail": "class Arrest_Jail(Justice):\n    \"\"\"self.agent arrested self.person in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            agent=agent,\n            person=person,\n            place=place,\n        )",
    "Execute": "class Execute(Justice):\n    \"\"\"self.agent executed self.person at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            agent=agent,\n            person=person,\n            place=place,\n        )",
    "Trial_Hearing": "class Trial_Hearing(Justice):\n    \"\"\"self.prosecutor tried self.defendant before self.adjudicator court or judge in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        defendant: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n        prosecutor: List[GPE | ORG | PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            adjudicator=adjudicator,\n            defendant=defendant,\n            place=place,\n            prosecutor=prosecutor,\n        )",
    "Charge_Indict": "class Charge_Indict(Justice):\n    \"\"\"self.prosecutor charged or indicted self.defendant before self.adjudicator court or judge in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        defendant: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n        prosecutor: List[GPE | ORG | PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            adjudicator=adjudicator,\n            defendant=defendant,\n            place=place,\n            prosecutor=prosecutor,\n        )",
    "Convict": "class Convict(Justice):\n    \"\"\"self.adjudicator court or judge convicted self.defendant in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        defendant: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            adjudicator=adjudicator,\n            defendant=defendant,\n            place=place,\n        )",
    "Sentence": "class Sentence(Justice):\n    \"\"\"self.adjudicator court or judge sentenced self.defendant in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        defendant: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            adjudicator=adjudicator,\n            defendant=defendant,\n            place=place,\n        )",
    "Release_Parole": "class Release_Parole(Justice):\n    \"\"\"self.entity released or paroled self.person in self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        entity: List[GPE | ORG | PER] = [],\n        person: List[PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            entity=entity,\n            person=person,\n            place=place,\n        )",
    "Fine": "class Fine(Justice):\n    \"\"\"self.adjudicator court or judge fined self.entity at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        entity: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            adjudicator=adjudicator,\n            entity=entity,\n            place=place,\n        )",
    "Pardon": "class Pardon(Justice):\n    \"\"\"self.adjudicator court or judge pardoned self.defendant at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        defendant: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            adjudicator=adjudicator,\n            defendant=defendant,\n            place=place,\n        )",
    "Appeal": "class Appeal(Justice):\n    \"\"\"self.plaintiff appealed to self.adjudicator court or judge at self.place place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        place: List[FAC | GPE | LOC] = [],\n        plaintiff: List[GPE | ORG | PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            adjudicator=adjudicator,\n            place=place,\n            plaintiff=plaintiff,\n        )",
    "Extradite": "class Extradite(Justice):\n    \"\"\"self.agent extradited self.person from self.origin place to self.destination place.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        agent: List[GPE | ORG | PER] = [],\n        destination: List[FAC | GPE | LOC] = [],\n        origin: List[FAC | GPE | LOC] = [],\n        person: List[PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            agent=agent,\n            destination=destination,\n            origin=origin,\n            person=person,\n        )",
    "Acquit": "class Acquit(Justice):\n    \"\"\"self.adjudicator court or judge acquitted self.defendant.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        adjudicator: List[GPE | ORG | PER] = [],\n        defendant: List[GPE | ORG | PER] = [],\n    ):\n        super().__init__(\n            trigger = trigger,\n            adjudicator=adjudicator,\n            defendant=defendant,\n        )"
}