{
    "Trigger:\n    \"\"\"a single verb or nominalization that serve as the main word to evoke the corresponding event\"\"\"\n    def __init__": "class Trigger:\n    \"\"\"a single verb or nominalization that serve as the main word to evoke the corresponding event\"\"\"\n    def __init__(self, name: str):\n        self.name = name",
    "Databreach": "class Databreach(Event):\n    \"\"\"an attacker compromises a system and removes data, e.g., to sell or publish it.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        purpose: List[Entity] = [],\n        place: List[Entity] = [],\n        number_of_victim: List[Entity] = [],\n        compromised_data: List[Entity] = [],\n        damage_amount: List[Entity] = [],\n        attacker: List[Entity] = [],\n        victim: List[Entity] = [],\n        number_of_data: List[Entity] = [],\n        tool: List[Entity] = [],\n        time: List[Entity] = [],\n        attack_pattern: List[Entity] = [],\n    ):\n        self.trigger = trigger\n        self.purpose = purpose\n        self.place = place\n        self.number_of_victim = number_of_victim\n        self.compromised_data = compromised_data\n        self.damage_amount = damage_amount\n        self.attacker = attacker\n        self.victim = victim\n        self.number_of_data = number_of_data\n        self.tool = tool\n        self.time = time\n        self.attack_pattern = attack_pattern",
    "Discover_Vulnerability": "class Discover_Vulnerability(Event):\n    \"\"\"a security expert or other entity, like a company, finds a software vulnerability.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        vulnerable_system: List[Entity] = [],\n        vulnerability: List[Entity] = [],\n        vulnerable_system_version: List[Entity] = [],\n        common_vulnerabilities_and_exposures: List[Entity] = [],\n        supported_platform: List[Entity] = [],\n        discoverer: List[Entity] = [],\n        vulnerable_system_owner: List[Entity] = [],\n        time: List[Entity] = [],\n    ):\n        self.trigger = trigger\n        self.vulnerable_system = vulnerable_system\n        self.vulnerability = vulnerability\n        self.vulnerable_system_version = vulnerable_system_version\n        self.common_vulnerabilities_and_exposures = common_vulnerabilities_and_exposures\n        self.supported_platform = supported_platform\n        self.discoverer = discoverer\n        self.vulnerable_system_owner = vulnerable_system_owner\n        self.time = time",
    "Patch_Vulnerability": "class Patch_Vulnerability(Event):\n    \"\"\"a software company addresses a known vulnerability by releasing or describing an appropriate update.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        vulnerable_system: List[Entity] = [],\n        vulnerability: List[Entity] = [],\n        issues_addressed: List[Entity] = [],\n        releaser: List[Entity] = [],\n        vulnerable_system_version: List[Entity] = [],\n        patch: List[Entity] = [],\n        common_vulnerabilities_and_exposures: List[Entity] = [],\n        patch_number: List[Entity] = [],\n        time: List[Entity] = [],\n    ):\n        self.trigger = trigger\n        self.vulnerable_system = vulnerable_system\n        self.vulnerability = vulnerability\n        self.issues_addressed = issues_addressed\n        self.releaser = releaser\n        self.vulnerable_system_version = vulnerable_system_version\n        self.patch = patch\n        self.common_vulnerabilities_and_exposures = common_vulnerabilities_and_exposures\n        self.patch_number = patch_number\n        self.time = time",
    "Phishing": "class Phishing(Event):\n    \"\"\"an attacker imitates another entity, in an attempt to get a victim to access malicious materials, such as a website or attachments.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        purpose: List[Entity] = [],\n        place: List[Entity] = [],\n        damage_amount: List[Entity] = [],\n        attacker: List[Entity] = [],\n        victim: List[Entity] = [],\n        tool: List[Entity] = [],\n        trusted_entity: List[Entity] = [],\n        time: List[Entity] = [],\n        attack_pattern: List[Entity] = [],\n    ):\n        self.trigger = trigger\n        self.purpose = purpose\n        self.place = place\n        self.damage_amount = damage_amount\n        self.attacker = attacker\n        self.victim = victim\n        self.tool = tool\n        self.trusted_entity = trusted_entity\n        self.time = time\n        self.attack_pattern = attack_pattern",
    "Ransom": "class Ransom(Event):\n    \"\"\"an attacker breaks into a system and encrypts data, and will only decrypt the data for a ransom payment.\"\"\"\n    def __init__(\n        self,\n        trigger: Trigger = Trigger(\"\"),\n        place: List[Entity] = [],\n        payment_method: List[Entity] = [],\n        damage_amount: List[Entity] = [],\n        attacker: List[Entity] = [],\n        victim: List[Entity] = [],\n        price: List[Entity] = [],\n        tool: List[Entity] = [],\n        time: List[Entity] = [],\n        attack_pattern: List[Entity] = [],\n    ):\n        self.trigger = trigger\n        self.place = place\n        self.payment_method = payment_method\n        self.damage_amount = damage_amount\n        self.attacker = attacker\n        self.victim = victim\n        self.price = price\n        self.tool = tool\n        self.time = time\n        self.attack_pattern = attack_pattern",
    "Others": "class Others(Event):\n    \"\"\"Events that do not belong to any Event Class above.\"\"\"\n    def __init__(self, name: str):\n        self.name = name"
}